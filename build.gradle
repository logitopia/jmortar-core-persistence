/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/tutorial_java_projects.html
 */
apply plugin: 'java-library'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'jacoco'

version = '1.0.0'

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0"
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'jacoco'

    // Disable the test report for the individual test task
    test {
        reports.html.enabled = false
    }

    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories =  files(sourceSets.main.output)
        reports {
            xml.enabled false
            csv.enabled false
            html.destination file("${buildDir}/reports/jacoco/jacocoHtml")
        }
    }
}

repositories {
    maven {
        url "https://plugins.gradle.org/m2/"
    }

    jcenter()
}

task testReports( type : TestReport ) {
    group 'Create a release'
    description 'Runs test reports and outputs them to the sites directory so that they are published.'

    // Store the test reports into our documentation site
    destinationDir = file("docs/TestReport/${version.replaceAll("\\."  ,  "_")}")

    reportOn subprojects*.test
}

task buildJavadoc( type : Javadoc ) {
    group 'Create a release'
    description 'Builds all required Javadoc and outputs it to the sites directory that it is published.'

    // Build javadoc for all of the Java source (non-optional)
    source subprojects.collect {project -> project.sourceSets.main.allJava }
    classpath = files(subprojects.collect {project -> project.sourceSets.main.compileClasspath})

    // Make a directory for this release
    def outputDir = "docs/javadoc/${version.replaceAll("\\."  ,  "_")}"
    File versionDir = new File(outputDir)
    versionDir.mkdirs()

    destinationDir = versionDir
}

task testCoverage( type: JacocoReport ) {
    group 'Create a release'
    description 'Run the test coverate reports and output them to the sites directory.'

    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)

    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("docs/jacoco/${version.replaceAll("\\.", "_")}/jacocoHtml")
    }
}
